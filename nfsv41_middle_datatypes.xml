<!-- Copyright (C) The IETF Trust (2011) -->
<!-- Copyright (C) The Internet Society (2011) -->

<section anchor="sec:protocol_constants" title="Protocol Constants and Data Types">
  <t>
    The syntax and semantics to describe the data types of the NFSv4.1
    protocol are defined in the XDR RFC 4506 <xref target="RFC4506" /> and RPC RFC 5531 <xref target="RFC5531" />
    documents.  The next sections build upon the XDR data types to define
    constants, types, and structures specific to this protocol.  The full
    list of XDR data types is in <xref target="I-D.ietf-nfsv4-rfc5662bis-dot-x" />.
  </t>

  <section anchor="ss:protocol_constants:BC" title="Basic Constants">
    <t>
      <?rfc include='autogen/const_sizes.xml'?>
    </t>

    <t>
      Except where noted, all these constants are defined in bytes.
    </t>

    <t>
      <list style='symbols'>
        <t>
          NFS4_FHSIZE is the maximum size of a filehandle.
        </t>

        <t>
          NFS4_VERIFIER_SIZE is the fixed size of a verifier.
        </t>

        <t>
          NFS4_OPAQUE_LIMIT is the maximum size of certain opaque
          information.
        </t>

        <t>
          NFS4_SESSIONID_SIZE is the fixed size of a session identifier.
        </t>

        <t>
          NFS4_INT64_MAX is the maximum value of a signed 64-bit integer.
        </t>

        <t>
          NFS4_UINT64_MAX is the maximum value of an unsigned 64-bit
          integer.
        </t>

        <t>
          NFS4_INT32_MAX is the maximum value of a signed 32-bit integer.
        </t>

        <t>
          NFS4_UINT32_MAX is the maximum value of an unsigned 32-bit
          integer.
        </t>

        <t>
          NFS4_MAXFILELEN is the maximum length of a regular file.
        </t>

        <t>
          NFS4_MAXFILEOFF is the maximum offset into a regular file.
        </t>
      </list>
    </t>
  </section>

  <section anchor="ss:protocol_constants:BDT" title="Basic Data Types">
    <texttable anchor="tbl:basic_data_types">
      <preamble>These are the base NFSv4.1 data types.</preamble>
      <ttcol align="left">Data Type</ttcol>
      <ttcol align="left">Definition</ttcol>
      <?rfc include='autogen/basic_types.xml'?>
      <postamble>End of Base Data Types</postamble>
    </texttable>
  </section>

  <section anchor="ss:protocol_constants:SDT" title="Structured Data Types">
    <section toc='exclude' anchor="ss:protocol_constants:n" title="nfstime4">
      <t>
        <?rfc include='autogen/type_nfstime4.xml'?>
      </t>
     
      <t>
        The nfstime4 data type gives the number of seconds and nanoseconds
        since midnight or zero hour January 1, 1970 Coordinated Universal
        Time (UTC).  Values greater than zero for the seconds field denote
        dates after the zero hour January 1, 1970.  Values less than zero for
        the seconds field denote dates before the zero hour January 1, 1970.
        In both cases, the nseconds field is to be added to the seconds field
        for the final time representation.  For example, if the time to be
        represented is one-half second before zero hour January 1, 1970, the
        seconds field would have a value of negative one (-1) and the
        nseconds field would have a value of one-half second (500000000).
        Values greater than 999,999,999 for nseconds are invalid.
      </t>
     
      <t>
        This data type is used to pass time and date information.  A server
        converts to and from its local representation of time when processing
        time values, preserving as much accuracy as possible.  If the
        precision of timestamps stored for a file system object is less than
        defined, loss of precision can occur.  An adjunct time maintenance
        protocol is RECOMMENDED to reduce client and server time skew.
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:t" title="time_how4">
      <t>
        <?rfc include='autogen/type_time_how4.xml'?>
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:s" title="settime4">
      <t>
        <?rfc include='autogen/type_settime4.xml'?>
      </t>

      <t>
        The time_how4 and settime4 data types are used for setting timestamps
        in file object attributes.  If set_it is SET_TO_SERVER_TIME4, then
        the server uses its local representation of time for the time value.
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:s1" title="specdata4">
      <?rfc include='autogen/type_specdata4.xml'?>
      <t>
        This data type represents the device numbers for the device file
        types NF4CHR and NF4BLK.
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:f" title="fsid4">
      <t>
        <?rfc include='autogen/type_fsid4.xml'?>
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:c" title="change_policy4">
      <t>
        <?rfc include='autogen/type_chg_policy4.xml'?>
      </t>

      <t>
        The change_policy4 data type is used for the change_policy
        RECOMMENDED attribute.  It provides change sequencing indication
        analogous to the change attribute.  To enable the server to present a
        value valid across server re-initialization without requiring
        persistent storage, two 64-bit quantities are used, allowing one to
        be a server instance ID and the second to be incremented
        non-persistently, within a given server instance.
      </t>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:f1" title="fattr4">
      <t>
        <?rfc include='autogen/type_fattr4.xml'?>
      </t>

      <t>
        The fattr4 data type is used to represent file and directory
        attributes.
      </t>
     
      <t>
        The bitmap is a counted array of 32-bit integers used to contain bit
        values.  The position of the integer in the array that contains bit n
        can be computed from the expression (n / 32), and its bit within that
        integer is (n mod 32).
      </t>

      <figure>
        <artwork>
                     0            1
    +-----------+-----------+-----------+--
    |  count    | 31  ..  0 | 63  .. 32 |
    +-----------+-----------+-----------+--
        </artwork>
      </figure>
    </section>

    <section toc='exclude' anchor="ss:protocol_constants:c1" title="change_info4">
      <t>
        <?rfc include='autogen/type_change_info4.xml'?>
      </t>
  
      <t>
        This data type is used with the CREATE, LINK, OPEN, REMOVE, and
        RENAME operations to let the client know the value of the change
        attribute for the directory in which the target file system object
        resides.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:n1" title="netaddr4">
      <t>
        <?rfc include='autogen/type_netaddr4.xml'?>
      </t>
  
      <t>
         The netaddr4 data type is used to identify network transport
         endpoints.  The r_netid and r_addr fields respectively contain a
         netid and uaddr.  The netid and uaddr concepts are defined in <xref target="RFC5665" />.
         The netid and uaddr formats for TCP over IPv4 and TCP over IPv6 are
         defined in <xref target="RFC5665" />, specifically Tables 2 and 3 and Sections 5.2.3.3 and
         5.2.3.4.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:s2" title="state_owner4">
      <?rfc include='autogen/type_state_owner4.xml'?>
  
      <t>
        The state_owner4 data type is the base type for the open_owner4
        (<xref target="ss:protocol_constants:o" />) and lock_owner4
        (<xref target="ss:protocol_constants:l" />).
      </t>
  
      <section toc='exclude' anchor="ss:protocol_constants:o" title="open_owner4">
        <t>
          This data type is used to identify the owner of OPEN state.
        </t>
      </section>
  
      <section toc='exclude' anchor="ss:protocol_constants:l" title="lock_owner4">
        <t>
          This structure is used to identify the owner of byte-range locking
          state.
        </t>
      </section>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:o1" title="open_to_lock_owner4">
      <t>
        <?rfc include='autogen/type_open_to_lock_owner4.xml'?>
      </t>
  
      <t>
        This data type is used for the first LOCK operation done for an
        open_owner4.  It provides both the open_stateid and lock_owner, such
        that the transition is made from a valid open_stateid sequence to
        that of the new lock_stateid sequence.  Using this mechanism avoids
        the confirmation of the lock_owner/lock_seqid pair since it is tied
        to established state in the form of the open_stateid/open_seqid.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:s3" title="stateid4">
      <t>
        <?rfc include='autogen/type_stateid4.xml'?>
      </t>
  
      <t>
        This data type is used for the various state sharing mechanisms
        between the client and server.  The client never modifies a value of
        data type stateid.  The starting value of the "seqid" field is
        undefined.  The server is required to increment the "seqid" field by
        one at each transition of the stateid.  This is important since the
        client will inspect the seqid in OPEN stateids to determine the order
        of OPEN processing done by the server.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l1" title="layouttype4">
      <t>
        <?rfc include='autogen/type_layouttype4.xml'?>
      </t>
  
      <t>
        This data type indicates what type of layout is being used.  The file
        server advertises the layout types it supports through the
        fs_layout_type file system attribute (<xref target="ss:file_attributes:A6f2" />).  A client asks
        for layouts of a particular type in LAYOUTGET, and processes those
        layouts in its layout-type-specific logic.
      </t>
  
      <t>
        The layouttype4 data type is 32 bits in length.  The range
        represented by the layout type is split into three parts.  Type 0x0
        is reserved.  Types within the range 0x00000001-0x7FFFFFFF are
        globally unique and are assigned according to the description in
        <xref target="ss:iana_considerations:LT" />; they are maintained by IANA.  Types within the range
        0x80000000-0xFFFFFFFF are site specific and for private use only.
      </t>
  
      <t>
        The LAYOUT4_NFSV4_1_FILES enumeration specifies that the NFSv4.1 file
        layout type, as defined in <xref target="sec:nfsv4.1_as" />, is to be used.  The
        LAYOUT4_OSD2_OBJECTS enumeration specifies that the object layout, as
        defined in <xref target="RFC5664" />, is to be used.  Similarly, the LAYOUT4_BLOCK_VOLUME
        enumeration specifies that the block/volume layout, as defined in
        <xref target="RFC5663" />, is to be used.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:d" title="deviceid4">
      <t>
        <?rfc include='autogen/type_deviceid4.xml'?>
      </t>
  
      <t>
        Layout information includes device IDs that specify a storage device
        through a compact handle.  Addressing and type information is
        obtained with the GETDEVICEINFO operation.  Device IDs are not
        guaranteed to be valid across metadata server restarts.  A device ID
        is unique per client ID and layout type.  See <xref target="ss:parallel_nfs:DI" /> for
        more details.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:d1" title="device_addr4">
      <t>
        <?rfc include='autogen/type_device_addr4.xml'?>
      </t>
  
      <t>
        The device address is used to set up a communication channel with the
        storage device.  Different layout types will require different data
        types to define how they communicate with storage devices.  The
        opaque da_addr_body field is interpreted based on the specified
        da_layout_type field.
      </t>
     
      <t>
        This document defines the device address for the NFSv4.1 file layout
        (see <xref target="ss:nfsv4.1_as:FLDT" />), which identifies a storage device by network IP
        address and port number.  This is sufficient for the clients to
        communicate with the NFSv4.1 storage devices, and may be sufficient
        for other layout types as well.  Device types for object-based
        storage devices and block storage devices (e.g., Small Computer
        System Interface (SCSI) volume labels) are defined by their
        respective layout specifications.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l2" title="layout_content4">
      <t>
        <?rfc include='autogen/type_layout_content4.xml'?>
      </t>
  
      <t>
        The loc_body field is interpreted based on the layout type
        (loc_type).  This document defines the loc_body for the NFSv4.1 file
        layout type; see <xref target="ss:nfsv4.1_as:FLDT" /> for its definition.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l3" title="layout4">
      <t>
        <?rfc include='autogen/type_layout4.xml'?>
      </t>
  
      <t>
        The layout4 data type defines a layout for a file.  The layout type
        specific data is opaque within lo_content.  Since layouts are
        sub-dividable, the offset and length together with the file's filehandle,
        the client ID, iomode, and layout type identify the layout.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l4" title="layoutupdate4">
      <t>
        <?rfc include='autogen/type_layoutupdate4.xml'?>
      </t>
  
      <t>
        The layoutupdate4 data type is used by the client to return
        updated layout information to the metadata server via the
        LAYOUTCOMMIT (<xref target="op_LAYOUTCOMMIT" />) operation.  This data type provides
        a channel to pass layout type specific information (in field
        lou_body) back to the metadata server.  For example, for the
        block/volume layout type, this could include the list of reserved
        blocks that were written.  The contents of the opaque lou_body
        argument are determined by the layout type.  The NFSv4.1 file-based
        layout does not use this data type; if lou_type is
        LAYOUT4_NFSV4_1_FILES, the lou_body field MUST have a zero length.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l5" title="layouthint4">
      <t>
        <?rfc include='autogen/type_layouthint4.xml'?>
      </t>
  
      <t>
        The layouthint4 data type is used by the client to pass in a hint
        about the type of layout it would like created for a particular file.
        It is the data type specified by the layout_hint attribute described
        in <xref target="ss:file_attributes:A6l2" />.  The metadata server may ignore the hint or may
        selectively ignore fields within the hint.  This hint should be
        provided at create time as part of the initial attributes within
        OPEN.  The loh_body field is specific to the type of layout
        (loh_type).  The NFSv4.1 file-based layout uses the
        nfsv4_1_file_layouthint4 data type as defined in <xref target="ss:nfsv4.1_as:FLDT" />.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:l6" title="layoutiomode4">
      <t>
        <?rfc include='autogen/type_layoutiomode4.xml'?>
      </t>
  
      <t>
        The iomode specifies whether the client intends to just read or both
        read and write the data represented by the layout.  While the
        LAYOUTIOMODE4_ANY iomode MUST NOT be used in the arguments to the
        LAYOUTGET operation, it MAY be used in the arguments to the
        LAYOUTRETURN and CB_LAYOUTRECALL operations.  The LAYOUTIOMODE4_ANY
        iomode specifies that layouts pertaining to both LAYOUTIOMODE4_READ
        and LAYOUTIOMODE4_RW iomodes are being returned or recalled,
        respectively.  The metadata server's use of the iomode may depend on
        the layout type being used.  The storage devices MAY validate I/O
        accesses against the iomode and reject invalid accesses.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:n2" title="nfs_impl_id4">
      <t>
        <?rfc include='autogen/type_nfs_impl_id4.xml'?>
      </t>
  
      <t>
        This data type is used to identify client and server implementation
        details.  The nii_domain field is the DNS domain name with which the
        implementor is associated.  The nii_name field is the product name of
        the implementation and is completely free form.  It is RECOMMENDED
        that the nii_name be used to distinguish machine architecture,
        machine platforms, revisions, versions, and patch levels.  The
        nii_date field is the timestamp of when the software instance was
        published or built.
      </t>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:t1" title="threshold_item4">
      <t>
        <?rfc include='autogen/type_threshold_item4.xml'?>
      </t>
  
      <t>
        This data type contains a list of hints specific to a layout type for
        helping the client determine when it should send I/O directly through
        the metadata server versus the storage devices.  The data type
        consists of the layout type (thi_layout_type), a bitmap (thi_hintset)
        describing the set of hints supported by the server (they may differ
        based on the layout type), and a list of hints (thi_hintlist) whose
        content is determined by the hintset bitmap.  See the mdsthreshold
        attribute for more details.
      </t>
  
      <t>
        The thi_hintset field is a bitmap of the following values:
      </t>
  
      <texttable>
        <ttcol align="left">name</ttcol>
        <ttcol align="left">#</ttcol>
        <ttcol align="left">Data Type</ttcol>
        <ttcol align="left">Description</ttcol>
  
        <c>threshold4_read_size</c>
        <c>0</c>
        <c>length4</c>
        <c>
          If a file's length is less than the value of threshold4_read_size, then it is RECOMMENDED
          that the client read from the file via the MDS and not a storage device.
        </c>
  
        <c>threshold4_write_size</c>
        <c>1</c>
        <c>length4</c>
        <c>
          If a file's length is less than the value of threshold4_write_size, then it is RECOMMENDED
          that the client write to the file via the MDS and not a storage device.
        </c>
  
        <c>threshold4_read_iosize</c>
        <c>2</c>
        <c>length4</c>
        <c>
          For read I/O sizes below this threshold, it is RECOMMENDED to read data through the MDS.
        </c>
  
        <c>threshold4_write_iosize</c>
        <c>3</c>
        <c>length4</c>
        <c>
          For write I/O sizes below this threshold, it is RECOMMENDED to write data through the MDS.
        </c>
      </texttable>
    </section>
  
    <section toc='exclude' anchor="ss:protocol_constants:m" title="mdsthreshold4">
      <t>
        <?rfc include='autogen/type_mdsthreshold4.xml'?>
      </t>
  
      <t>
        This data type holds an array of elements of data type
        threshold_item4, each of which is valid for a particular layout type.
        An array is necessary because a server can support multiple layout
        types for a single file.
      </t>
    </section>
  </section>
</section>
