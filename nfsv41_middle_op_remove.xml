<!-- Copyright (C) The IETF Trust (2011) -->
<!-- Copyright (C) The Internet Society (2011) -->

  <section anchor="op_REMOVE" title="Operation 28: REMOVE - Remove File System Object">
    <section toc='exclude' anchor="ss:op_REMOVE:A" title="ARGUMENT">
      <?rfc include='autogen/remove_args.xml'?>
    </section>

    <section toc='exclude' anchor="ss:op_REMOVE:R" title="RESULT">
      <?rfc include='autogen/remove_res.xml'?>
    </section>

    <section toc='exclude' anchor="ss:op_REMOVE:D" title="DESCRIPTION">
      <t>
        The REMOVE operation removes (deletes) a directory entry named by
        filename from the directory corresponding to the current filehandle.
        If the entry in the directory was the last reference to the
        corresponding file system object, the object may be destroyed.  The
        directory may be either of type NF4DIR or NF4ATTRDIR.
      </t>

      <t>
        For the directory where the filename was removed, the server returns
        change_info4 information in cinfo.  With the atomic field of the
        change_info4 data type, the server will indicate if the before and
        after change attributes were obtained atomically with respect to the
        removal.
      </t>

      <t>
        If the target has a length of zero, or if the target does not obey
        the UTF-8 definition (and the server is enforcing UTF-8 encoding; see
        <xref target="ss:internationalization:UC" />), the error NFS4ERR_INVAL will be returned.
      </t>

      <t>
        On success, the current filehandle retains its value.
      </t>
    </section>

    <section toc='exclude' anchor="ss:op_REMOVE:I" title="IMPLEMENTATION">
      <t>
        NFSv3 required a different operator RMDIR for directory removal and
        REMOVE for non-directory removal.  This allowed clients to skip
        checking the file type when being passed a non-directory delete
        system call (e.g., unlink() <xref target="openg_unlink" /> in POSIX) to remove a directory, as
        well as the converse (e.g., a rmdir() on a non-directory) because
        they knew the server would check the file type.  NFSv4.1 REMOVE can
        be used to delete any directory entry independent of its file type.
        The implementor of an NFSv4.1 client's entry points from the unlink()
        and rmdir() system calls should first check the file type against the
        types the system call is allowed to remove before sending a REMOVE
        operation.  Alternatively, the implementor can produce a COMPOUND
        call that includes a LOOKUP/VERIFY sequence of operations to verify
        the file type before a REMOVE operation in the same COMPOUND call.
      </t>

      <t>
        The concept of last reference is server specific.  However, if the
        numlinks field in the previous attributes of the object had the value
        1, the client should not rely on referring to the object via a
        filehandle.  Likewise, the client should not rely on the resources
        (disk space, directory entry, and so on) formerly associated with the
        object becoming immediately available.  Thus, if a client needs to be
        able to continue to access a file after using REMOVE to remove it,
        the client should take steps to make sure that the file will still be
        accessible.  While the traditional mechanism used is to RENAME the
        file from its old name to a new hidden name, the NFSv4.1 OPEN
        operation MAY return a result flag, OPEN4_RESULT_PRESERVE_UNLINKED,
        which indicates to the client that the file will be preserved if the
        file has an outstanding open (see <xref target="op_OPEN" />).
      </t>

      <t>
        If the server finds that the file is still open when the REMOVE
        arrives:
      </t>

      <t>
        <list style='symbols'>
          <t>
            The server SHOULD NOT delete the file's directory entry if the
            file was opened with OPEN4_SHARE_DENY_WRITE or
            OPEN4_SHARE_DENY_BOTH.
          </t>

          <t>
            If the file was not opened with OPEN4_SHARE_DENY_WRITE or
            OPEN4_SHARE_DENY_BOTH, the server SHOULD delete the file's
            directory entry.  However, until last CLOSE of the file, the
            server MAY continue to allow access to the file via its
            filehandle.
          </t>

          <t>
            The server MUST NOT delete the directory entry if the reply from
            OPEN had the flag OPEN4_RESULT_PRESERVE_UNLINKED set.
          </t>
        </list>
      </t>

      <t>
        The server MAY implement its own restrictions on removal of a file
        while it is open.  The server might disallow such a REMOVE (or a
        removal that occurs as part of RENAME).  The conditions that
        influence the restrictions on removal of a file while it is still
        open include:
      </t>

      <t>
        <list style='symbols'>
          <t>
            Whether certain access protocols (i.e., not just NFS) are holding
            the file open.
          </t>

          <t>
            Whether particular options, access modes, or policies on the
            server are enabled.
          </t>
        </list>
      </t>

      <t>
        If a file has an outstanding OPEN and this prevents the removal of
        the file's directory entry, the error NFS4ERR_FILE_OPEN is returned.
      </t>

      <t>
        Where the determination above cannot be made definitively because
        delegations are being held, they MUST be recalled to allow processing
        of the REMOVE to continue.  When a delegation is held, the server has
        no reliable knowledge of the status of OPENs for that client, so
        unless there are files opened with the particular deny modes by
        clients without delegations, the determination cannot be made until
        delegations are recalled, and the operation cannot proceed until each
        sufficient delegation has been returned or revoked to allow the
        server to make a correct determination.
      </t>

      <t>
        In all cases in which delegations are recalled, the server is likely
        to return one or more NFS4ERR_DELAY errors while delegations remain
        outstanding.
      </t>

      <t>
        If the current filehandle designates a directory for which another
        client holds a directory delegation, then, unless the situation can
        be resolved by sending a notification, the directory delegation MUST
        be recalled, and the operation MUST NOT proceed until the delegation
        is returned or revoked.  Except where this happens very quickly, one
        or more NFS4ERR_DELAY errors will be returned to requests made while
        delegation remains outstanding.
      </t>

      <t>
        When the current filehandle designates a directory for which one or
        more directory delegations exist, then, when those delegations
        request such notifications, NOTIFY4_REMOVE_ENTRY will be generated as
        a result of this operation.
      </t>

      <t>
        Note that when a remove occurs as a result of a RENAME,
        NOTIFY4_REMOVE_ENTRY will only be generated if the removal happens as
        a separate operation.  In the case in which the removal is integrated
        and atomic with RENAME, the notification of the removal is integrated
        with notification for the RENAME.  See the discussion of the
        NOTIFY4_RENAME_ENTRY notification in <xref target="op_CB_NOTIFY" />.
      </t>
    </section>
  </section>

